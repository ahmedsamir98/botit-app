name: botit-app

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
    steps: 
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.x

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Run tests
        run: |
          python -m venv exvenv
          python ./tests/test_hello.py > test_output.txt 2>&1
          if grep -q "OK" test_output.txt; then
          echo "::set-output name=test_result::success"
            else
          echo "::set-output name=test_result::failure"
            fi

      - name: Get test result
        run: |
          echo ${{ needs.run_tests.outputs.test_result }}  

      - name: Notify on Slack
        uses: rtCamp/action-slack-notify@v2
        if: always()
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_CHANNEL: "#botit-app"
          SLACK_MESSAGE: Test Case ${{ env.test_result }} 
          SLACK_USERNAME: GitHub Actions
        with:
          args: |
            Test result: ${{ env.test_result }} 


  # build_and_Push:
  #   runs-on: ubuntu-latest
  #   env:
  #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
  #   steps: 
  #     - name: Set env
  #       run: echo "DATE=$(date +'%Y%m%d-%H%M')" >> $GITHUB_ENV

  #     - name: Send Slack Notification build start
  #       uses: rtCamp/action-slack-notify@v2
  #       env:
  #         SLACK_CHANNEL: "#botit-app"
  #         SLACK_COLOR: ${{ job.status }} 
  #         SLACK_MESSAGE: Build ${{ env.DATE }} Start 
  #         SLACK_TITLE: Post Title
  #         SLACK_USERNAME: Botit-App
  #         SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}

  #     - name: Checkout code
  #       uses: actions/checkout@v2

  #     - name: Login to Docker Hub
  #       uses: docker/login-action@v2
  #       with:
  #         username: "${{ secrets.DOCKER_USERNAME }}"
  #         password: "${{ secrets.DOCKER_PASSWORD }}"

  #     - name: Build and push
  #       id: build_and_push
  #       uses: docker/build-push-action@v3
  #       with:
  #         context: .
  #         push: true
  #         tags: ahmedsamir98/botit:${{ env.DATE }}

  #     - name: Send Slack Notification Build and Push completed
  #       uses: rtCamp/action-slack-notify@v2
  #       env:
  #         SLACK_CHANNEL: "#botit-app"
  #         SLACK_COLOR: ${{ job.status }} # or a specific color like 'good' or '#ff00ff'
  #         SLACK_MESSAGE: Build ${{ env.DATE }} Pushed to the Repo 
  #         SLACK_TITLE: Post Title
  #         SLACK_USERNAME: Botit-App
  #         SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}

  #     - name: Checkout deployment branch
  #       uses: actions/checkout@v2
  #       with:
  #         ref: deployment  # Checkout the deployment branch
    
  #     - name: Update docker-compose.yaml
  #       run: |
  #         echo ${{ env.DATE }}
  #         sed -i 's|image: ahmedsamir98/botit:##TAGS##|image: ahmedsamir98/botit:${{ env.DATE }}|g' docker-compose.yaml

  #     - name: Copy Docker Compose file to remote server
  #       uses: appleboy/scp-action@master
  #       with:
  #         host: "${{ secrets.ARTIFACT_HOST }}"
  #         username: "${{ secrets.REMOTE_SERVER_USERNAME }}"
  #         key: "${{ secrets.SSH_PRIVATE_KEY }}"
  #         port: 22
  #         source: "docker-compose.yaml"
  #         target: "/opt/botit-app"

  # deploy:

  #   runs-on: ubuntu-latest
  #   needs: build_and_Push
  #   if: ${{ needs.build_and_Push.result == 'success' }}
  #   env:
  #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
  #   steps:

  #     - name: SSH into remote server and start Docker Compose
  #       uses: appleboy/ssh-action@master
  #       with:
  #         host: "${{ secrets.ARTIFACT_HOST }}"
  #         username: "${{ secrets.REMOTE_SERVER_USERNAME }}"
  #         key: "${{ secrets.SSH_PRIVATE_KEY }}"
  #         port: 22
  #         script: |
  #           cd /opt/botit-app/
  #           sudo docker compose up -d
